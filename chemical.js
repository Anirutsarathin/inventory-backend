const express = require("express");
const pool = require("./db");
const authMiddleware = require("./authMiddleware");

const app = express();
app.use(express.json());

app.post("/api/chemicals/add", authMiddleware, async (req, res) => {
  const {
    chemical_name,
    chemical_type,
    quantity,
    received_date,
    expiry_date,
    company_name,
    price,
  } = req.body;

  let conn;
  try {
    conn = await pool.getConnection();

    console.log("üì© [REQ] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Frontend:", {
      chemical_name,
      chemical_type,
      quantity,
      received_date,
      expiry_date,
      company_name,
      price,
    });

    // ---------------------------
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ
    // ---------------------------
    if (!chemical_type) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ chemical_type ‡πÉ‡∏ô req.body");
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ" });
    }

    const typeRows = await conn.query(
      "SELECT type_id FROM chemical_types WHERE LOWER(type_name) = LOWER(?) LIMIT 1",
      [chemical_type]
    );

    console.log("üîç [DEBUG] ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å chemical_types:", typeRows);

    let typeId;
    if (Array.isArray(typeRows) && typeRows.length > 0 && typeRows[0].type_id) {
      typeId = typeRows[0].type_id;
    } else if (
      Array.isArray(typeRows[0]) &&
      typeRows[0].length > 0 &&
      typeRows[0][0].type_id
    ) {
      typeId = typeRows[0][0].type_id;
    }

    if (!typeId) {
      console.log("‚ö†Ô∏è [DEBUG] ‡πÑ‡∏°‡πà‡∏û‡∏ö type_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:", chemical_type);
      return res
        .status(400)
        .json({ error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ '${chemical_type}' ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö` });
    }

    console.log("‚úÖ [DEBUG] type_id ‡∏ó‡∏µ‡πà‡∏û‡∏ö:", typeId);

    // ---------------------------
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ (‡∏ä‡∏∑‡πà‡∏≠ + ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó + ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)
    // ---------------------------
    const existResult = await conn.query(
      `SELECT chemical_id, quantity 
       FROM chemicals 
       WHERE chemical_name = ? 
         AND chemical_type = ? 
         AND expiry_date = ?
       LIMIT 1`,
      [chemical_name, chemical_type, expiry_date]
    );

    console.log("üîç [DEBUG] ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥ (raw):", existResult);

    let existRows = [];
    if (Array.isArray(existResult) && existResult.length > 0) {
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á object
      if (existResult[0] && existResult[0].chemical_id) {
        existRows = [existResult[0]];
      }
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏ã‡πâ‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô [ [ { chemical_id: 'chacc000001' } ], fields ]
      else if (
        Array.isArray(existResult[0]) &&
        existResult[0].length > 0 &&
        existResult[0][0].chemical_id
      ) {
        existRows = existResult[0];
      }
    } else if (existResult && existResult.chemical_id) {
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
      existRows = [existResult];
    }

    console.log("üîç [DEBUG] existRows ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß:", existRows);

    if (existRows.length > 0) {
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ ‚Üí update ‡πÅ‡∏ó‡∏ô
      const oldQty = parseFloat(existRows[0].quantity || 0);
      const newQty = oldQty + parseFloat(quantity || 0);

      console.log("üîÅ [DEBUG] ‡πÄ‡∏à‡∏≠‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ã‡πâ‡∏≥ ‚Üí update ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°:", {
        chemical_id: existRows[0].chemical_id,
        oldQty,
        add: quantity,
        newQty,
      });

      await conn.query(
        `UPDATE chemicals 
         SET quantity = ?, received_date = ?, company_name = ?, price = ? 
         WHERE chemical_id = ?`,
        [newQty, received_date, company_name, price, existRows[0].chemical_id]
      );

      console.log("‚úÖ [UPDATE SUCCESS] chemical_id:", existRows[0].chemical_id);

      return res.json({
        message: "‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ã‡πâ‡∏≥ ‚Üí ‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        chemical_id: existRows[0].chemical_id,
        new_quantity: newQty,
      });
    }

    // ---------------------------
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‚Üí gen ID ‡πÉ‡∏´‡∏°‡πà
    // ---------------------------
    const prefix = "ch" + typeId;
    console.log("üß© [DEBUG] prefix:", prefix);

    const maxIdResult = await conn.query(
      "SELECT chemical_id FROM chemicals WHERE chemical_id LIKE ? ORDER BY chemical_id DESC LIMIT 1",
      [prefix + "%"]
    );

    console.log("üìä [DEBUG] MaxID Query (raw):", maxIdResult);

    let maxIdRows = [];
    if (Array.isArray(maxIdResult) && maxIdResult.length > 0) {
      if (Array.isArray(maxIdResult[0])) {
        maxIdRows = maxIdResult[0];
      } else {
        maxIdRows = maxIdResult;
      }
    }

    console.log("üìä [DEBUG] maxIdRows ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß:", maxIdRows);

    let runNo = 1;
    if (maxIdRows.length > 0) {
      const lastId = maxIdRows[0].chemical_id;
      runNo = parseInt(lastId.slice(prefix.length)) + 1;
      console.log("‚öôÔ∏è [DEBUG] ‡∏û‡∏ö running ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:", lastId, "‚Üí runNo ‡πÉ‡∏´‡∏°‡πà:", runNo);
    } else {
      console.log("üÜï [DEBUG] ‡πÑ‡∏°‡πà‡∏°‡∏µ ID ‡πÄ‡∏î‡∏¥‡∏° ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏° runNo = 1");
    }

    const newId = prefix + runNo.toString().padStart(6, "0");
    console.log("üÜî [DEBUG] chemical_id ‡πÉ‡∏´‡∏°‡πà:", newId);

    // ‚úÖ insert ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡πÉ‡∏´‡∏°‡πà
    await conn.query(
      `INSERT INTO chemicals
       (chemical_id, chemical_name, chemical_type, quantity, received_date, expiry_date, company_name, price)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        newId,
        chemical_name,
        chemical_type,
        quantity,
        received_date,
        expiry_date,
        company_name,
        price,
      ]
    );

    console.log("‚úÖ [SUCCESS] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", newId);

    res.json({
      message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      chemical_id: newId,
    });
  } catch (err) {
    console.error("‚ùå [ERROR] Add Chemical Error:", err);
    res.status(500).json({ error: "Server error" });
  } finally {
    if (conn) conn.release();
  }
});


// ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/api/chemicals/all", authMiddleware, async (req, res) => {
  let conn;
  try {
    conn = await pool.getConnection();

    const rows = await conn.query(
      `SELECT 
          c.chemical_name,c.chemical_id,
          c.chemical_type,
          c.quantity,
           DATE_FORMAT(c.expiry_date, '%d-%b-%Y') AS expiry_date
       FROM chemicals c
       ORDER BY c.chemical_id ASC`
    );

    res.json({ chemicals: rows });
  } catch (err) {
    console.error("Get Chemicals Error:", err);
    res.status(500).json({ error: "Server error" });
  } finally {
    if (conn) conn.release();
  }
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô dropdown)
app.get("/api/chemicals/types", authMiddleware, async (req, res) => {
  let conn;
  try {
    conn = await pool.getConnection();

    // üîπ Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á chemical_types
    const rows = await conn.query(
      "SELECT type_name FROM chemical_types ORDER BY type_name ASC"
    );

    // ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ä‡πà‡∏ô { types: [ {type_name: 'Acid'}, ... ] }
    res.json({ types: rows });
  } catch (err) {
    console.error("Get Chemical Types Error:", err);
    res.status(500).json({ error: "Server error" });
  } finally {
    if (conn) conn.release();
  }
});


// ‚úÖ ‡∏•‡∏ö‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ï‡∏≤‡∏° chemical_id
app.delete("/api/chemicals/:id", authMiddleware, async (req, res) => {
  const { id } = req.params;

  let conn;
  try {
    conn = await pool.getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ chemical_id ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
    const check = await conn.query(
      "SELECT chemical_id FROM chemicals WHERE chemical_id = ?",
      [id]
    );

    if (check.length === 0) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await conn.query("DELETE FROM chemicals WHERE chemical_id = ?", [id]);

    res.json({ message: "‡∏•‡∏ö‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", chemical_id: id });
  } catch (err) {
    console.error("Delete Chemical Error:", err);
    res.status(500).json({ error: "Server error" });
  } finally {
    if (conn) conn.release();
  }
});

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å)
app.put("/api/chemicals/:id", authMiddleware, async (req, res) => {
  const { id } = req.params; // ‡∏£‡∏±‡∏ö ID ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏à‡∏≤‡∏Å URL ‡πÄ‡∏ä‡πà‡∏ô /api/chemicals/5
  const { chemical_name, chemical_type, quantity, expiry_date } = req.body; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å body

  let conn;
  try {
    conn = await pool.getConnection();

    // ------------------------------------------------
    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏´‡∏°
    // ------------------------------------------------
    const [check] = await conn.query(
      "SELECT chemical_id FROM chemicals WHERE chemical_id = ?",
      [id]
    );

    if (!check || check.length === 0) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
    }

    // ------------------------------------------------
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (update ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
    // ------------------------------------------------
    await conn.query(
      `
      UPDATE chemicals
      SET 
        chemical_name = ?,     -- ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
        chemical_type = ?,     -- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (acid/base/‡∏Ø‡∏•‡∏Ø)
        quantity = ?,          -- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        expiry_date = ?        -- ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      WHERE chemical_id = ?
      `,
      [chemical_name, chemical_type, quantity, expiry_date, id]
    );

    // ------------------------------------------------
    // ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
    // ------------------------------------------------
    res.json({ message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", chemical_id: id });
  } catch (err) {
    console.error("Update Chemical Error:", err);
    res.status(500).json({ error: "Server error" });
  } finally {
    if (conn) conn.release(); // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà pool
  }
});



module.exports = app;